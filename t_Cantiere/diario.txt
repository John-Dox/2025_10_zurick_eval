2025-06-17 h 21.45
Dobbiamo riprendere la corretta implementazione dello script per il riconoscimento delle modalità di risposta, dal momento che adesso intendo passare oltre e completare prima tutta la struttura.
 Quando parliamo di modalità di risposta intendiamo la capacità di far sì che lo script riceva il nostro messaggio per sintetico più approfondito eccetera eccetera: Dobbiamo trovare una lista di sinonimi e probabilmente coinvolgere anche l'intelligenza artificiale per comprenderli meglio.

2025-06-17 h 22
abbiamo appena creato 5_1utils_memory_agent.py che contiene il debug di print nel caso in cui recupera gli entities: ora dobbiamo accertarci che stampi tutto, non solo gli articoli. Poi lo abbiamo rinominato in utils_memory_agent.py e abbiamo salvato il suo log risposte, chiedendo come mai non riuscisse a trovare il capo: come mai non attiva il filtro per capo.
Guardando la risposta di gemini mi accorgo che nel filtro dobbiamo inserire anche "parte"

2025-06-18 h 18:10
A quanto pare dobbiamo ricordarci anche di aggiungere dei riassunti per le parti del Regolamento, non solo dei capi come già abbiamo

2025-06-21 h 22
Dalla chat IA Gemini 2025-06-20 Ultimo step aggiustare parti e fallback manuale
A quanto pare dobbiamo aggiustare il follow-up e il resto funzionerebbe pure.
Io intanto procedo con dei testi miei e poi direi di concentrarsi sull'aggiustamento della struttura

2025-06-21 h 22.30
Adesso io direi di andare avanti con la tematica dei 2 riassunti. Per il momento mettiamo in cantiere il follow-up

2025-06-22 h 14
Siamo riusciti a inserire correttamente i due riassunti; ci manca ancora qualcosa da fare ma lo abbiamo messo in cantiere. Abbiamo appena prodotto un manuale che è "C:\Users\Alex\Il mio Drive (aleterro9)\aa_rag\a - manuali\2025-06-20 Recupero 3 files in Gemini\2025-06-22 Files recuperati- doppi riassunti.md"
Adesso andiamo avanti correggendo la struttura, eliminando i campi metadata superflui nei chunks e nei vettori e soprattutto aggiustando il conteggio del numero degli articoli.
Poi magari mettiamo qualche altro riassunto e infine proviamo a aggiungere un secondo testo.
La conversazione di riferimento per questa fase è ancora 2025-06-20 Ultimo step aggiustare parti e fallback manuale.
Da adesso in poi passiamo a una nuova cartella che chiameremo q_amplia_struttura e facciamo un backup di questa funzionante p_test_structure.
Da adesso in poi creiamo una nuova repository che si chiama https://github.com/John-Dox/20250622_structure.git

2025-06-22 h 15.50
A quanto pare siamo riusciti a far funzionare la logica dei due articoli. Attenzione: non della ricerca con due riassunti (che già funzionava) bensì la capacità di trovare dei chunks corrispondenti a articoli diversi, come ad esempio il 3 e 5.
Adesso lui vorrebbe procedere a riparare il follow-up in modo che riconosca un seguito domanda anche quando menzioniamo un modello @; ma io preferirei andare avanti con altre cose. Siamo sempre nella conversazione 2025-06-20 Ultimo step aggiustare parti e fallback manuale

2025-06-22 h 14.45
A quanto pare siamo riusciti a estrarre correttamente i 181 articoli, utilizzando LO STESSO script di prima ma cambiano il modello (gemini pro 2.5 anziché 1.5).

2025-06-23 h 00.30
Qui c'è un problema: Attiva correttamente il filtro strutturale, ma poi carica ugualmente i riassunti e recupera i chunks, mentre invece per le domande strutturali in filtro dovrebbe proprio bypassare il rag e rispondere direttamente dal file json.
Questa seconda domanda, quando chiediamo di cosa parla l'art. 52, ci fa capire una cosa fondamentale della domanda precedente: il filtro era attivato, ma non un filtro specifico. In altre parole non era un intent specifico di appartenenza o di conteggio, che evidentemente abbiamo perso per strada nelle varie sintesi. RECUPERARE.
Altra cosa che dobbiamo chiederci: vedo che il contesto recuperato si ferma a 5 chunks: vuol dire che ne utilizza solo 5 o che ne mostra solo 5?
Altro punto: perché @gpt è l'unico che crea questo genere di problema?